import * as React from 'react'
export default function Exercicio02({initialName = ''}) {
    // üê® initialize the state to the value from localStorage  
    // üí∞ window.localStorage.getItem('name') || initialName  
    const [name, setName] = React.useState(
        // Recupera√ß√£o de um valor previamente salvo no localStorage
        // ou usa o valor de initialName, caso o item do localStorage
        // n√£o exista

        // Retornando uma fun√ß√£o para criar um lazy initializer,
        // que √© executado paenas uma vez, no carregamento inicial
        // da p√°gina

        // Ao inv√©s de fornecer um valor, fornece uma fun√ß√£o que
        // retorna o valor
       () => readStorage() || initialName
    )
    const [count, setCount] = React.useState(() => 0)

    function readStorage() {
        console.count('Lido localStorage')
        return window.localStorage.getItem('name')
    }
    
    // üê® Here's where you'll use `React.useEffect`.  
    // The callback should set the `name` in localStorage.  
    // üí∞ window.localStorage.setItem('name', name)  

    // Armazenando em um item do localStorage chamado "name" o valor
    // da vari√°vel de estado name
    React.useEffect(() => {
        window.localStorage.setItem('name', name)
        setCount(count + 1)
    }, [name])
    // colocando o vetor [name], o useEffect() atualiza somente 
    // depois que a vari√°vel for alterada.

    // useEffect() tem dois par√¢metros:
    // 1) √â uma fun√ß√£o que ser√° atualizada depois de uma atualiza√ß√£o
    // do componente
    // 2) Vetor de depend√™ncias: qual ou quais as vari√°ves de estado
    // que ser√£o monitoradas para a execu√ß√£o do useEffect()


    // A informa√ß√£o √© guardada no localStorage DEPOIS do componente
    // atualizado, como consequ√™ncia da mudan√ßa de estado do nome.
    // Toda vez que mudar o conte√∫do do input, ser√° alterado o valor
    // da vari√°vel de estado "name".

    function handleChange(event) {
        // A atualiza√ß√£o da vari√°vel de estado "name" vai desencadear
        // uma atualiza√ß√£o do componente. Ap√≥s a atualiza√ß√£o ter sido
        // processada, ser√° executado o useEffect().
      setName(event.target.value)
    }
    return (
      <div>      
          <form>        
              <label htmlFor="name">Name: </label>        
              <input value={name} onChange={handleChange} 
              id="name" />      
              </form>      
              {name ? <strong>Hello {name}</strong> : 
              'Please type your name'}
              <div>Quantidade de atualiza√ß√µes: {count}</div>
      </div>  )
  }